<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TetraPak.Auth.Xamarin</name>
    </assembly>
    <members>
        <member name="P:TetraPak.Auth.Xamarin.AbstractAuthenticator.Log">
            <summary>
              Gets a logger (if any).
            </summary>
            <seealso cref="M:TetraPak.Auth.Xamarin.AbstractAuthenticator.LogInfo(System.String)"/>
            <seealso cref="M:TetraPak.Auth.Xamarin.AbstractAuthenticator.LogDebug(System.String)"/>
            <seealso cref="M:TetraPak.Auth.Xamarin.AbstractAuthenticator.LogError(System.Exception,System.String)"/>
        </member>
        <member name="P:TetraPak.Auth.Xamarin.AbstractAuthenticator.Config">
            <summary>
              Gets the configuration.
            </summary>
        </member>
        <member name="P:TetraPak.Auth.Xamarin.AbstractAuthenticator.CacheKey">
            <summary>
              Gets a default cache key (the client Id).
            </summary>
        </member>
        <member name="M:TetraPak.Auth.Xamarin.AbstractAuthenticator.LogInfo(System.String)">
            <summary>
              Logs a message of <see cref="F:TetraPak.Auth.Xamarin.logging.LogRank.Info"/>.
            </summary>
        </member>
        <member name="M:TetraPak.Auth.Xamarin.AbstractAuthenticator.LogDebug(System.String)">
            <summary>
              Logs a message of <see cref="F:TetraPak.Auth.Xamarin.logging.LogRank.Debug"/>.
            </summary>
        </member>
        <member name="M:TetraPak.Auth.Xamarin.AbstractAuthenticator.LogError(System.Exception,System.String)">
            <summary>
              Logs an error an an optional message (of <see cref="F:TetraPak.Auth.Xamarin.logging.LogRank.Error"/>).
            </summary>
        </member>
        <member name="P:TetraPak.Auth.Xamarin.AbstractAuthenticator.IsCaching">
            <summary>
              Gets a value indicating whether token can be persisted.
            </summary>
            <seealso cref="P:TetraPak.Auth.Xamarin.AuthConfig.TokenCache"/>
        </member>
        <member name="M:TetraPak.Auth.Xamarin.AbstractAuthenticator.GetAccessTokenAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:TetraPak.Auth.Xamarin.AbstractAuthenticator.GetAccessTokenSilentlyAsync">
            <inheritdoc />
        </member>
        <member name="M:TetraPak.Auth.Xamarin.AbstractAuthenticator.#ctor(TetraPak.Auth.Xamarin.AuthConfig,TetraPak.Auth.Xamarin.logging.ILog)">
            <summary>
              Initializes the authenticator.
            </summary>
        </member>
        <member name="T:TetraPak.Auth.Xamarin.AuthApplication">
            <summary>
              Describes an application to be authorized.
              The type can be expressed in textual format:
              "[&lt;Platform&gt;]; &lt;Environment&gt;; &lt;Client Id&gt;; &lt;Redirect Uri&gt;";
            </summary>
            <remarks>
              This class is used to easily describe your application to allow the <see cref="T:TetraPak.Auth.Xamarin.Authorization"/>
              API to configure a <see cref="T:TetraPak.Auth.Xamarin.IAuthenticator"/> as you request it. 
            </remarks>
            <seealso cref="M:TetraPak.Auth.Xamarin.Authorization.GetAuthenticator(TetraPak.Auth.Xamarin.AuthConfig,TetraPak.Auth.Xamarin.logging.ILog)"/>
        </member>
        <member name="P:TetraPak.Auth.Xamarin.AuthApplication.ClientId">
            <summary>
              Gets the application client id.
            </summary>
        </member>
        <member name="P:TetraPak.Auth.Xamarin.AuthApplication.RedirectUri">
            <summary>
              Gets the application redirect <see cref="T:System.Uri"/>.
            </summary>
        </member>
        <member name="P:TetraPak.Auth.Xamarin.AuthApplication.Environment">
            <summary>
              Gets the application redirect <see cref="P:TetraPak.Auth.Xamarin.AuthApplication.Environment"/>.
            </summary>
        </member>
        <member name="P:TetraPak.Auth.Xamarin.AuthApplication.RuntimePlatform">
            <summary>
              Gets the application redirect <see cref="P:TetraPak.Auth.Xamarin.AuthApplication.RuntimePlatform"/>.
            </summary>
        </member>
        <member name="P:TetraPak.Auth.Xamarin.AuthApplication.StringValue">
            <summary>
              Gets the value's textual representation.
            </summary>
        </member>
        <member name="M:TetraPak.Auth.Xamarin.AuthApplication.op_Implicit(System.String)~TetraPak.Auth.Xamarin.AuthApplication">
            <summary>
              Implicitly converts a string literal into a <see cref="T:TetraPak.Auth.Xamarin.AuthApplication"/>.
            </summary>
            <param name="stringValue">
              A string representation of the <see cref="T:TetraPak.Auth.Xamarin.AuthApplication"/> value.
            </param>
            <returns>
              A <see cref="T:TetraPak.Auth.Xamarin.AuthApplication"/> value.
            </returns>
            <exception cref="T:System.FormatException">
              The <paramref name="stringValue"/> string representation was incorrectly formed.
            </exception>
        </member>
        <member name="M:TetraPak.Auth.Xamarin.AuthApplication.op_Implicit(TetraPak.Auth.Xamarin.AuthApplication)~System.String">
            <summary>
              Implicitly converts a <see cref="T:TetraPak.Auth.Xamarin.AuthApplication"/> value into its <see cref="T:System.String"/> representation.
            </summary>
            <param name="value">
              A <see cref="T:TetraPak.Auth.Xamarin.AuthApplication"/> value to be implicitly converted into its <see cref="T:System.String"/> representation.
            </param>
            <returns>
              The <see cref="T:System.String"/> representation of <paramref name="value"/>.
            </returns>
        </member>
        <member name="M:TetraPak.Auth.Xamarin.AuthApplication.ToString">
            <inheritdoc />
        </member>
        <member name="M:TetraPak.Auth.Xamarin.AuthApplication.Equals(TetraPak.Auth.Xamarin.AuthApplication)">
            <summary>
              Determines whether this instance and another specified <seealso cref="T:TetraPak.Auth.Xamarin.AuthApplication"/>
              object are semantically equal.
            </summary>
        </member>
        <member name="M:TetraPak.Auth.Xamarin.AuthApplication.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:TetraPak.Auth.Xamarin.AuthApplication.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:TetraPak.Auth.Xamarin.AuthApplication.#ctor(System.String,System.Uri,TetraPak.Auth.Xamarin.RuntimeEnvironment,TetraPak.Auth.Xamarin.RuntimePlatform)">
            <summary>
              Initializes an <see cref="T:TetraPak.Auth.Xamarin.AuthApplication"/> instance.
            </summary>
            <exception cref="T:System.ArgumentNullException">
              The <paramref name="clientId"/> was unassigned.
            </exception>
        </member>
        <member name="M:TetraPak.Auth.Xamarin.AuthApplication.#ctor(System.String)">
            <summary>
              Initializes the value.
            </summary>
            <param name="stringValue">
              The new value's string representation (will automatically be parsed).
            </param>
            <exception cref="T:System.FormatException">
              The <paramref name="stringValue"/> string representation was incorrectly formed.
            </exception>
        </member>
        <member name="T:TetraPak.Auth.Xamarin.AuthConfig">
            <summary>
              Used to configure a <see cref="T:TetraPak.Auth.Xamarin.TetraPakAuthenticator"/>.
            </summary>
            <remarks>
              Used to configure a `IAuthenticator` used for acquiring access tokens.
              The <b>TAX</b> system can create this configuration behind the scene if you describe your application
              using the more simplified <see cref="T:TetraPak.Auth.Xamarin.AuthApplication"/> when invoking
              <see cref="M:TetraPak.Auth.Xamarin.Authorization.GetAuthenticator(TetraPak.Auth.Xamarin.AuthConfig,TetraPak.Auth.Xamarin.logging.ILog)"/>
              but an `AuthConfig` allows for more custom configuration.
            </remarks>
        </member>
        <member name="P:TetraPak.Auth.Xamarin.AuthConfig.Authority">
            <summary>
              Gets or sets the <see cref="T:System.Uri"/> to the authority endpoint.
            </summary>
        </member>
        <member name="P:TetraPak.Auth.Xamarin.AuthConfig.TokenIssuer">
            <summary>
              Gets or sets the <see cref="T:System.Uri"/> to the token issuing endpoint.
            </summary>
        </member>
        <member name="P:TetraPak.Auth.Xamarin.AuthConfig.RedirectUri">
            <summary>
              Gets or sets a redirect <see cref="T:System.Uri"/>, used for passing back an auth code.
            </summary>
        </member>
        <member name="P:TetraPak.Auth.Xamarin.AuthConfig.ClientId">
            <summary>
              Gets or sets the client id (a.k.a. "app id").
            </summary>
        </member>
        <member name="P:TetraPak.Auth.Xamarin.AuthConfig.Scope">
            <summary>
              Gets or sets a scope value when applicable.
            </summary>
        </member>
        <member name="P:TetraPak.Auth.Xamarin.AuthConfig.IsStateUsed">
            <summary>
              Gets or sets a value indicating whether to use state in the auth code flow.
            </summary>
        </member>
        <member name="P:TetraPak.Auth.Xamarin.AuthConfig.IsPkceUsed">
            <summary>
              Gets or sets a value indicating whether to use the PKCE extension with the auth code flow.
            </summary>
        </member>
        <member name="P:TetraPak.Auth.Xamarin.AuthConfig.IsCaching">
            <summary>
              Gets or sets a value specifying whether authorizations (tokens)
              should be cached. Default value is <c>true</c>.
            </summary>
        </member>
        <member name="P:TetraPak.Auth.Xamarin.AuthConfig.TokenCache">
            <summary>
              Gets or sets a (custom) token cache. This value cannot be unassigned
              and a default token cache will always be provided.
            </summary>
        </member>
        <member name="M:TetraPak.Auth.Xamarin.AuthConfig.Default(TetraPak.Auth.Xamarin.RuntimeEnvironment,System.String,System.Uri,TetraPak.Auth.Xamarin.RuntimePlatform)">
            <summary>
              Creates a default OAuth configuration for a specified application.
            </summary>
            <param name="environment">
              The targeted runtime environment.
            </param>
            <param name="clientId">
              The application's client id (a.k.a. "app id").
            </param>
            <param name="redirectUri">
                The application's redirect <see cref="T:System.Uri"/>.
            </param>
            <param name="platform">
              (optional; default = <see cref="F:TetraPak.Auth.Xamarin.RuntimePlatform.Any"/>)<br/>
              An intended runtime platform.
            </param>
            <returns>
              A <see cref="T:TetraPak.Auth.Xamarin.AuthConfig"/> object with a default configuration for the specified application.
            </returns>
        </member>
        <member name="M:TetraPak.Auth.Xamarin.AuthConfig.Default(TetraPak.Auth.Xamarin.AuthApplication)">
            <summary>
              Creates a default OAuth configuration for a specified application.
            </summary>
            <param name="application">
              Describes the application to be authorized.
            </param>
            <returns>
              A <see cref="T:TetraPak.Auth.Xamarin.AuthConfig"/> object with a default configuration for the specified application.
            </returns>
        </member>
        <member name="M:TetraPak.Auth.Xamarin.AuthConfig.#ctor(System.Uri,System.Uri,System.Uri,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,TetraPak.Auth.Xamarin.TokenCache)">
            <summary>
              Initializes the configuration.
            </summary>
        </member>
        <member name="T:TetraPak.Auth.Xamarin.AuthConfigExtensions">
            <summary>
              Offers convenient extensions for the <see cref="T:TetraPak.Auth.Xamarin.AuthConfig"/> class.
            </summary>
        </member>
        <member name="M:TetraPak.Auth.Xamarin.AuthConfigExtensions.WithAuthority(TetraPak.Auth.Xamarin.AuthConfig,System.Uri)">
            <summary>
              Fluent API to assign the <see cref="P:TetraPak.Auth.Xamarin.AuthConfig.Authority"/>. 
            </summary>
            <returns>
              <c>this</c>
            </returns>
        </member>
        <member name="M:TetraPak.Auth.Xamarin.AuthConfigExtensions.WithTokenIssuer(TetraPak.Auth.Xamarin.AuthConfig,System.Uri)">
            <summary>
              Fluent API to assign the <see cref="P:TetraPak.Auth.Xamarin.AuthConfig.TokenIssuer"/>. 
            </summary>
            <returns>
              <c>this</c>
            </returns>
        </member>
        <member name="M:TetraPak.Auth.Xamarin.AuthConfigExtensions.WithEndpoints(TetraPak.Auth.Xamarin.AuthConfig,System.Uri,System.Uri)">
            <summary>
              Fluent API to assign the two endpoint properties
              (<see cref="P:TetraPak.Auth.Xamarin.AuthConfig.Authority"/> and <see cref="P:TetraPak.Auth.Xamarin.AuthConfig.TokenIssuer"/>). 
            </summary>
            <returns>
              <c>this</c>
            </returns>
        </member>
        <member name="M:TetraPak.Auth.Xamarin.AuthConfigExtensions.WithScope(TetraPak.Auth.Xamarin.AuthConfig,System.String[])">
            <summary>
              Adds one or more scope identifiers to the <see cref="P:TetraPak.Auth.Xamarin.AuthConfig.Scope"/> value.
            </summary>
            <returns>
              <c>this</c>
            </returns>
        </member>
        <member name="M:TetraPak.Auth.Xamarin.AuthConfigExtensions.ClearScope(TetraPak.Auth.Xamarin.AuthConfig)">
            <summary>
              Clears the <see cref="P:TetraPak.Auth.Xamarin.AuthConfig.Scope"/> value.
            </summary>
            <returns>
              <c>this</c>
            </returns>
        </member>
        <member name="M:TetraPak.Auth.Xamarin.AuthConfigExtensions.RemoveScope(TetraPak.Auth.Xamarin.AuthConfig,System.String[])">
            <summary>
              Removes one or more scope identifiers from the <see cref="P:TetraPak.Auth.Xamarin.AuthConfig.Scope"/> value.
            </summary>
            <returns>
              <c>this</c>
            </returns>
        </member>
        <member name="M:TetraPak.Auth.Xamarin.AuthConfigExtensions.WithTokenCache(TetraPak.Auth.Xamarin.AuthConfig,TetraPak.Auth.Xamarin.TokenCache)">
            <summary>
              Replaces the default <see cref="T:TetraPak.Auth.Xamarin.TokenCache"/> with a (custom) one.
            </summary>
            <returns>
              <c>this</c>
            </returns>
        </member>
        <member name="T:TetraPak.Auth.Xamarin.Authorization">
            <summary>
              Provides a starting point for authorization.
            </summary>
            <remarks>
              This class can be used to start authorization of your client.
            </remarks>
        </member>
        <member name="P:TetraPak.Auth.Xamarin.Authorization.IsAppDelegateRegistered">
            <summary>
              Intended for internal use only.
            </summary>
        </member>
        <member name="M:TetraPak.Auth.Xamarin.Authorization.RegisterAppDelegate(System.Func{TetraPak.Auth.Xamarin.IAuthorizingAppDelegate})">
            <summary>
              Intended for internal use only.
            </summary>
        </member>
        <member name="M:TetraPak.Auth.Xamarin.Authorization.GetAuthorizingAppDelegate">
            <summary>
              Intended for internal use only.
            </summary>
        </member>
        <member name="M:TetraPak.Auth.Xamarin.Authorization.GetAuthenticator(TetraPak.Auth.Xamarin.AuthConfig,TetraPak.Auth.Xamarin.logging.ILog)">
            <summary>
              Resolves and returns a suitable authenticator.  
            </summary>
            <param name="config">
              The app configuration (<see cref="T:TetraPak.Auth.Xamarin.AuthConfig"/>).
            </param>
            <param name="log">
              (optional)<br/>
              A logger, for diagnostics purposes. 
            </param>
            <returns>
              An authenticator (implements <see cref="T:TetraPak.Auth.Xamarin.IAuthenticator"/>).
            </returns>
        </member>
        <member name="M:TetraPak.Auth.Xamarin.Authorization.GetAuthenticator(TetraPak.Auth.Xamarin.AuthApplication,TetraPak.Auth.Xamarin.logging.ILog)">
            <summary>
              Resolves and returns a suitable authenticator. 
            </summary>
            <param name="application">
              A <see cref="T:TetraPak.Auth.Xamarin.AuthApplication"/> descriptor value.
              Can be passed as a string.
            </param>
            <param name="log">
              (optional)<br/>
              A logger, for diagnostics purposes. 
            </param>
            <returns>
              An authenticator (implements <see cref="T:TetraPak.Auth.Xamarin.IAuthenticator"/>).
            </returns>
            <returns>
              An authenticator (implements <see cref="T:TetraPak.Auth.Xamarin.IAuthenticator"/>).
            </returns>
        </member>
        <member name="M:TetraPak.Auth.Xamarin.Authorization.GetAuthenticator(System.String,System.Uri,TetraPak.Auth.Xamarin.RuntimeEnvironment,TetraPak.Auth.Xamarin.logging.ILog)">
            <summary>
              Resolves and returns a suitable authenticator.
            </summary>
            <param name="clientId">
              Specifies the client id (a.k.a. app id). 
            </param>
            <param name="redirectUri">
              Specifies the redirect <see cref="T:System.Uri"/>.
            </param>
            <param name="environment">
              (optional; default = <see cref="F:TetraPak.Auth.Xamarin.RuntimeEnvironment.Production"/>)<br/>
              Specifies the targeted runtime environment. 
            </param>
            <param name="log">
              (optional)<br/>
              A logger, for diagnostics purposes. 
            </param>
            <returns>
              An authenticator (implements <see cref="T:TetraPak.Auth.Xamarin.IAuthenticator"/>).
            </returns>
        </member>
        <member name="T:TetraPak.Auth.Xamarin.AuthResult">
            <summary>
              Represents the result of an authorization operation.
            </summary>
        </member>
        <member name="P:TetraPak.Auth.Xamarin.AuthResult.Tokens">
            <summary>
              A collection of tokens returned from the issuer.
            </summary>
        </member>
        <member name="P:TetraPak.Auth.Xamarin.AuthResult.AccessToken">
            <summary>
              Gets the access token when successful.
            </summary>
        </member>
        <member name="P:TetraPak.Auth.Xamarin.AuthResult.RefreshToken">
            <summary>
              Gets an optional refresh token when successful.
            </summary>
        </member>
        <member name="P:TetraPak.Auth.Xamarin.AuthResult.Expires">
            <summary>
              Gets any provided expiration time when successful.
            </summary>
        </member>
        <member name="P:TetraPak.Auth.Xamarin.AuthResult.IsValid">
            <summary>
              Indicates whether the authorization is (still) valid.
            </summary>
        </member>
        <member name="T:TetraPak.Auth.Xamarin.TokenResult">
            <summary>
              Carries an individual token and its meta data.
            </summary>
        </member>
        <member name="P:TetraPak.Auth.Xamarin.TokenResult.Token">
            <summary>
              Gets the actual token as a <see cref="T:System.String"/> value.
            </summary>
        </member>
        <member name="P:TetraPak.Auth.Xamarin.TokenResult.Role">
            <summary>
              Gets the token role (see <see cref="T:TetraPak.Auth.Xamarin.TokenRole"/>).
            </summary>
        </member>
        <member name="P:TetraPak.Auth.Xamarin.TokenResult.Expires">
            <summary>
              Gets a expiration date/time, if available.
            </summary>
        </member>
        <member name="T:TetraPak.Auth.Xamarin.common.BoolValue`1">
            <summary>
              A boolean value that can also carry another value. This is
              very useful as a typical return value where you need an indication
              for "success" and, when successful, a value.
            </summary>
            <typeparam name="T">
              The type of value carried by the <see cref="T:TetraPak.Auth.Xamarin.common.BoolValue`1"/>.
            </typeparam>
            <remarks>
              Instances of type <see cref="T:TetraPak.Auth.Xamarin.common.BoolValue`1"/> can be implicitly cast to
              a <c>bool</c> value. Very useful for testing purposes.
            </remarks>
        </member>
        <member name="P:TetraPak.Auth.Xamarin.common.BoolValue`1.Value">
            <summary>
              The value carried by the object.
            </summary>
        </member>
        <member name="M:TetraPak.Auth.Xamarin.common.BoolValue`1.Success(`0)">
            <summary>
              Creates a <see cref="T:TetraPak.Auth.Xamarin.common.BoolValue`1"/> that equals <c>true</c> when cast to a
              <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">
              The value (of type <typeparamref name="T"/>) to be carried by the
              new <see cref="T:TetraPak.Auth.Xamarin.common.BoolValue`1"/> object.
            </param>
            <returns>
              A <see cref="T:TetraPak.Auth.Xamarin.common.BoolValue`1"/> that represents a <c>true</c> value when
              cast as a <see cref="T:System.Boolean"/> while also carrying a specified value.
            </returns>
        </member>
        <member name="M:TetraPak.Auth.Xamarin.common.BoolValue`1.Fail(System.String,System.Exception)">
            <summary>
              Creates a <see cref="T:TetraPak.Auth.Xamarin.common.BoolValue`1"/> that equals <c>false</c> when cast to a
              <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="message">
              (optional)<br/>
              A message to be carried by the <see cref="T:TetraPak.Auth.Xamarin.common.BoolValue`1"/> object
              (useful for error handling).
            </param>
            <param name="exception">
              (optional)<br/>
              An <see cref="T:System.Exception"/> to be carried by the <see cref="T:TetraPak.Auth.Xamarin.common.BoolValue`1"/> object
              (useful for error handling).
            </param>
            <returns>
              A <see cref="T:TetraPak.Auth.Xamarin.common.BoolValue`1"/> that represents a <c>true</c> value when
              cast as a <see cref="T:System.Boolean"/> while also carrying a specified value.
            </returns>
        </member>
        <member name="T:TetraPak.Auth.Xamarin.common.BoolValue">
            <summary>
              An abstract base class for a boolean value. 
            </summary>
        </member>
        <member name="P:TetraPak.Auth.Xamarin.common.BoolValue.Evaluated">
            <summary>
              Gets the value used when objects of this class is cast
              to a <see cref="T:System.Boolean"/> value.
            </summary>
        </member>
        <member name="P:TetraPak.Auth.Xamarin.common.BoolValue.Message">
            <summary>
              A message to be carried by the <see cref="T:TetraPak.Auth.Xamarin.common.BoolValue`1"/> object
              (useful for error handling).
            </summary>
        </member>
        <member name="P:TetraPak.Auth.Xamarin.common.BoolValue.Exception">
            <summary>
              An <see cref="P:TetraPak.Auth.Xamarin.common.BoolValue.Exception"/> to be carried by the <see cref="T:TetraPak.Auth.Xamarin.common.BoolValue`1"/> object
              (useful for error handling).
            </summary>
        </member>
        <member name="M:TetraPak.Auth.Xamarin.common.BoolValue.op_Implicit(TetraPak.Auth.Xamarin.common.BoolValue)~System.Boolean">
            <summary>
              Implicitly casts the <see cref="T:TetraPak.Auth.Xamarin.common.BoolValue"/> to a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="self"></param>
        </member>
        <member name="M:TetraPak.Auth.Xamarin.common.BoolValue.#ctor(System.Boolean,System.String,System.Exception)">
            <summary>
              Initializes a <see cref="T:TetraPak.Auth.Xamarin.common.BoolValue"/>.
            </summary>
            <param name="evaluated">
              Initializes the <see cref="P:TetraPak.Auth.Xamarin.common.BoolValue.Evaluated"/> property.
            </param>
            <param name="message">
              Initializes the <see cref="P:TetraPak.Auth.Xamarin.common.BoolValue.Message"/> property.
            </param>
            <param name="exception">
              Initializes the <see cref="P:TetraPak.Auth.Xamarin.common.BoolValue.Exception"/> property.
            </param>
        </member>
        <member name="T:TetraPak.Auth.Xamarin.common.MemoryCache`1">
            <summary>
              A basic memory cached that supports item longevity.
            </summary>
            <typeparam name="T">
              Type of items stored by the cache.
            </typeparam>
        </member>
        <member name="P:TetraPak.Auth.Xamarin.common.MemoryCache`1.DefaultKey">
            <summary>
              A default key. This is useful for single-use caching.
              When set, the 'key' parameter is not needed for invoking methods.
            </summary>
        </member>
        <member name="P:TetraPak.Auth.Xamarin.common.MemoryCache`1.Count">
            <summary>
              Gets the number of cached items.
            </summary>
        </member>
        <member name="M:TetraPak.Auth.Xamarin.common.MemoryCache`1.AddAsync(`0,System.Nullable{System.DateTime})">
            <summary>
              Adds an item to the cache.
            </summary>
            <param name="value"></param>
            <param name="expires"></param>
            <returns></returns>
        </member>
        <member name="M:TetraPak.Auth.Xamarin.common.MemoryCache`1.AddAsync(System.String,`0,System.Nullable{System.DateTime})">
            <summary>
              Adds an item to the cache.
            </summary>
            <param name="key">
              (optional)<br/>
              Identifies the item to be added.
            </param>
            <param name="item">
              The item to be added.
            </param>
            <param name="expires">
              (optional)<br/>
              A time when the tokens expire. After expiration the item will become
              unavailable after this time.
            </param>
        </member>
        <member name="M:TetraPak.Auth.Xamarin.common.MemoryCache`1.TryGetAsync(System.String)">
            <summary>
              Gets a specified item from the cache.
            </summary>
            <param name="key">
              (optional; default = <see cref="P:TetraPak.Auth.Xamarin.common.MemoryCache`1.DefaultKey"/>)<br/>
              Identifies the item.
            </param>
            <returns>
              A <see cref="T:TetraPak.Auth.Xamarin.common.BoolValue`1"/> to indicate success and hold the
              requested item.
            </returns>
        </member>
        <member name="M:TetraPak.Auth.Xamarin.common.MemoryCache`1.ContainsAsync(System.String)">
            <summary>
              Returns a value indicating whether a specified item is cached.
            </summary>
            <param name="key">
              (optional; default = <see cref="P:TetraPak.Auth.Xamarin.common.MemoryCache`1.DefaultKey"/>)<br/>
              Identifies the item.
            </param>
            <returns>
              <c>true</c> if the item is cached (and available); otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:TetraPak.Auth.Xamarin.common.MemoryCache`1.CleanAsync">
            <summary>
              Removes all expired items in the background.
            </summary>
        </member>
        <member name="M:TetraPak.Auth.Xamarin.common.MemoryCache`1.RemoveAsync(System.String)">
            <summary>
              Removes a specified item from cache.
            </summary>
            <param name="key">
              (optional; default = <see cref="P:TetraPak.Auth.Xamarin.common.MemoryCache`1.DefaultKey"/>)<br/>
              Identifies the item to be removed.
            </param>
        </member>
        <member name="M:TetraPak.Auth.Xamarin.common.MemoryCache`1.WithDefaultKey(System.String)">
            <summary>
              Assigns a default key for all tokens.
              When set, no key needs to be passed to other methods.
            </summary>
            <param name="key">
              Identifies cached tokens (typically a client/app id).
            </param>
            <returns>
              The <see cref="T:TetraPak.Auth.Xamarin.TokenCache"/> instance (fluid API).
            </returns>
        </member>
        <member name="T:TetraPak.Auth.Xamarin.common.StringExtensions">
            <summary>
              Extends <see cref="T:System.String"/> objects and operations.
            </summary>
        </member>
        <member name="M:TetraPak.Auth.Xamarin.common.StringExtensions.SplitCamelCase(System.String)">
            <summary>
              Splits a camel-case formatted string into its separate elements
              (e.g. "CamelCase" => "Camel Case" or "helloWorld" => "hello World") 
            </summary>
            <param name="camelCaseValue">
              The string to be split. 
            </param>
            <returns>
              A <see cref="T:System.String"/>, split into its separate elements.
            </returns>
        </member>
        <member name="M:TetraPak.Auth.Xamarin.common.StringExtensions.EnsureEndsWith(System.String,System.String,System.StringComparison)">
            <summary>
              Returns a <see cref="T:System.String"/> that is guaranteed to end with a specified suffix.
            </summary>
            <param name="value">
              The original string.
            </param>
            <param name="suffix">
              A <see cref="T:System.String"/> that will be appended to <paramref name="value"/> if not already present.
            </param>
            <param name="comparison">
              (optional; default = <see cref="F:System.StringComparison.Ordinal"/>)<br/>
              Used when detecting whether <paramref name="value"/> is already suffixed with the <paramref name="suffix"/> value.
            </param>
            <returns>
              A <see cref="T:System.String"/> that is identical to<paramref name="value"/>, suffixed with <paramref name="suffix"/>.
            </returns>
        </member>
        <member name="T:TetraPak.Auth.Xamarin.common.TypeExtensions">
            <summary>
              Helpers for type/reflection related operations.
            </summary>
        </member>
        <member name="M:TetraPak.Auth.Xamarin.common.TypeExtensions.IsDerivedFrom(System.Type,System.Type)">
            <summary>
              Analyzes a <seealso cref="T:System.Type"/> and returns a value indicating whether
              it is derived from another <seealso cref="T:System.Type"/>.
            </summary>
            <param name="derivedType">
              The (potentially derived) type to be tested.
            </param>
            <param name="baseType">
              A type to be tested as a base type.
            </param>
            <returns>
              <c>true</c> if <paramref name="derivedType"/> derives from <paramref name="baseType"/>;
              otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:TetraPak.Auth.Xamarin.common.TypeExtensions.IsNullable``1(``0)">
            <summary>
              Examines a specified value and returns a value to indicate whether
              it is a nullable value.
            </summary>
            <param name="_">
              The value to be examined.
            </param>
            <typeparam name="T">
              The type of value.
            </typeparam>
            <returns>
              <c>true</c> if the value is nullable; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="T:TetraPak.Auth.Xamarin.common.UriExtensions">
            <summary>
              Extension operations for <seealso cref="T:System.Uri"/> instances.
            </summary>
        </member>
        <member name="M:TetraPak.Auth.Xamarin.common.UriExtensions.TryGetQueryValue(System.Uri,System.String)">
            <summary>
              Looks for a query parameter value in a <see cref="T:System.Uri"/>.
            </summary>
            <param name="uri">
              The <seealso cref="T:System.Uri"/> containing the query.
            </param>
            <param name="key">
              A query property name to look for.
            </param>
            <returns>
              A <seealso cref="T:TetraPak.Auth.Xamarin.common.BoolValue`1"/> indicating whether the specified value
              was present in the query. On success this object will also carry the
              requested query property value (<seealso cref="P:TetraPak.Auth.Xamarin.common.BoolValue`1.Value"/>).
            </returns>
        </member>
        <member name="M:TetraPak.Auth.Xamarin.common.UriExtensions.EqualsBasePath(System.Uri,System.Uri,System.Boolean,System.StringComparison)">
            <summary>
              Compares a <see cref="T:System.Uri"/> with another <seealso cref="T:System.Uri"/> to check for
              matching base base paths.
            </summary>
            <param name="self">
              The <seealso cref="T:System.Uri"/>.
            </param>
            <param name="uri">
              Another <seealso cref="T:System.Uri"/> to compare with.
            </param>
            <param name="enforceMatchingScheme">
              (optional; default=<c>false</c>)<br/>
              Specifies whether the two <see cref="T:System.Uri"/> schemes must also match (e.g. "http" / "https").
            </param>
            <param name="comparison">
              (optional; default = <see cref="F:System.StringComparison.OrdinalIgnoreCase"/>)<br/>
              Specifies the string comparison method.
            </param>
            <returns></returns>
        </member>
        <member name="T:TetraPak.Auth.Xamarin.IAuthCallbackHandler">
            <summary>
              For internal use by platform code.
            </summary>
        </member>
        <member name="M:TetraPak.Auth.Xamarin.IAuthCallbackHandler.HandleUrlCallback(System.Uri)">
            <summary>
              For internal use by platform code.
            </summary>
            <param name="uri"></param>
        </member>
        <member name="T:TetraPak.Auth.Xamarin.IAuthenticator">
            <summary>
              Describes the contract for an authenticator implementation.
            </summary>
        </member>
        <member name="M:TetraPak.Auth.Xamarin.IAuthenticator.GetAccessTokenAsync(System.Boolean)">
            <summary>
              Attempts to acquire an access token.
            </summary>
            <param name="allowCached">
              (optional; default = <c>true</c>)<br/>
              Can be used to override global cache setting
              value for this particular operation.
            </param>
            <returns>
              A <seealso cref="T:TetraPak.Auth.Xamarin.common.BoolValue`1"/> indicating success while also carrying
              details for the authentication result, including access token.
            </returns>
        </member>
        <member name="M:TetraPak.Auth.Xamarin.IAuthenticator.GetAccessTokenSilentlyAsync">
            <summary>
              Attempts to acquire an access token "silently", automatically
              using any persisted refresh token in the process.
            </summary>
            <returns>
              A <seealso cref="T:TetraPak.Auth.Xamarin.common.BoolValue`1"/> indicating success while also carrying
              details for the authentication result, including access token.
            </returns>
        </member>
        <member name="T:TetraPak.Auth.Xamarin.IAuthorizingAppDelegate">
            <summary>
              For internal use by the Auth solution.
            </summary>
        </member>
        <member name="M:TetraPak.Auth.Xamarin.IAuthorizingAppDelegate.ActivateApp">
            <summary>
              For internal use by the Auth solution.
            </summary>
        </member>
        <member name="M:TetraPak.Auth.Xamarin.IAuthorizingAppDelegate.OpenInDefaultBrowserAsync(System.Uri)">
            <summary>
              For internal use by the Auth solution.
            </summary>
        </member>
        <member name="M:TetraPak.Auth.Xamarin.IAuthorizingAppDelegate.OpenInDefaultBrowserAsync(System.Uri,System.Uri)">
            <summary>
              For internal use by the Auth solution.
            </summary>
        </member>
        <member name="T:TetraPak.Auth.Xamarin.logging.BasicLog">
            <summary>
              Provides a very basic <see cref="T:TetraPak.Auth.Xamarin.logging.ILog"/> implementation.
            </summary>
            <remarks>
              Invoking the different log methods of this implementation simply
              triggers the <see cref="E:TetraPak.Auth.Xamarin.logging.BasicLog.Logged"/> event. This can be utilized to
              dispatch the actual log entries to various logging solutions.
            </remarks>
        </member>
        <member name="E:TetraPak.Auth.Xamarin.logging.BasicLog.Logged">
            <summary>
              This event gets fired for every new log entry added.
            </summary>
        </member>
        <member name="M:TetraPak.Auth.Xamarin.logging.BasicLog.Debug(System.String)">
            <summary>
              Logs a new message of <seealso cref="F:TetraPak.Auth.Xamarin.logging.LogRank.Debug"/>.
            </summary>
            <param name="message">
              The logged message.
            </param>
        </member>
        <member name="M:TetraPak.Auth.Xamarin.logging.BasicLog.Error(System.Exception,System.String)">
            <summary>
              Logs a new message of <seealso cref="F:TetraPak.Auth.Xamarin.logging.LogRank.Error"/>.
            </summary>
            <param name="exception">
              A logged <see cref="T:System.Exception"/>.
            </param>
            <param name="message">
              The logged message.
            </param>
        </member>
        <member name="M:TetraPak.Auth.Xamarin.logging.BasicLog.Info(System.String)">
            <summary>
              Logs a new message of <seealso cref="F:TetraPak.Auth.Xamarin.logging.LogRank.Info"/>.
            </summary>
            <param name="message">
              The logged message.
            </param>
        </member>
        <member name="T:TetraPak.Auth.Xamarin.logging.ILog">
            <summary>
              Provides a basic logging mechanism to the package.
            </summary>
        </member>
        <member name="E:TetraPak.Auth.Xamarin.logging.ILog.Logged">
            <summary>
              Triggered whenever a log entry gets added.
            </summary>
        </member>
        <member name="M:TetraPak.Auth.Xamarin.logging.ILog.Debug(System.String)">
            <summary>
              Adds a message of rank <see cref="F:TetraPak.Auth.Xamarin.logging.LogRank.Debug"/>.
            </summary>
            <param name="message">
              A textual message to be logged.
            </param>
        </member>
        <member name="M:TetraPak.Auth.Xamarin.logging.ILog.Info(System.String)">
            <summary>
              Adds a message of rank <see cref="F:TetraPak.Auth.Xamarin.logging.LogRank.Info"/>.
            </summary>
            <param name="message">
              A textual message to be logged.
            </param>
        </member>
        <member name="M:TetraPak.Auth.Xamarin.logging.ILog.Error(System.Exception,System.String)">
            <summary>
              Adds an <see cref="T:System.Exception"/> and message of rank <see cref="F:TetraPak.Auth.Xamarin.logging.LogRank.Error"/>.
            </summary>
            <param name="exception">
              An <see cref="T:System.Exception"/> to be logged.
            </param>
            <param name="message">
              A textual message to be logged.
            </param>
        </member>
        <member name="T:TetraPak.Auth.Xamarin.logging.LogRank">
            <summary>
              Used by the (<see cref="T:TetraPak.Auth.Xamarin.logging.ILog"/> based) logging mechanism
              to classify log entries.
            </summary>
        </member>
        <member name="F:TetraPak.Auth.Xamarin.logging.LogRank.Debug">
            <summary>
              The lowest (most detailed) log rank.
            </summary>
        </member>
        <member name="F:TetraPak.Auth.Xamarin.logging.LogRank.Info">
            <summary>
              Logs "normal" operations.
            </summary>
        </member>
        <member name="F:TetraPak.Auth.Xamarin.logging.LogRank.Error">
            <summary>
              Denotes a logged exception.
            </summary>
        </member>
        <member name="T:TetraPak.Auth.Xamarin.logging.TextLogEventArgs">
            <summary>
              Describes a log entry.
            </summary>
        </member>
        <member name="P:TetraPak.Auth.Xamarin.logging.TextLogEventArgs.Rank">
            <summary>
              Gets the log entry rank.
            </summary>
        </member>
        <member name="P:TetraPak.Auth.Xamarin.logging.TextLogEventArgs.Message">
            <summary>
              Gets the log entry message (if any).
            </summary>
        </member>
        <member name="P:TetraPak.Auth.Xamarin.logging.TextLogEventArgs.Exception">
            <summary>
              Gets a log entry error (if any).
            </summary>
        </member>
        <member name="M:TetraPak.Auth.Xamarin.logging.TextLogEventArgs.#ctor(TetraPak.Auth.Xamarin.logging.LogRank,System.String,System.Exception)">
            <summary>
              Initializes the event arguments.
            </summary>
        </member>
        <member name="T:TetraPak.Auth.Xamarin.OnUriCallbackHandler">
            <summary>
              For internal use by platform code.
            </summary>
        </member>
        <member name="T:TetraPak.Auth.Xamarin.RuntimeEnvironment">
            <summary>
              Specifies the targeted runtime environment.
            </summary>
            <seealso cref="M:TetraPak.Auth.Xamarin.AuthConfig.Default(TetraPak.Auth.Xamarin.RuntimeEnvironment,System.String,System.Uri,TetraPak.Auth.Xamarin.RuntimePlatform)"/>
            <seealso cref="M:TetraPak.Auth.Xamarin.AuthConfig.Default(TetraPak.Auth.Xamarin.AuthApplication)"/>
        </member>
        <member name="F:TetraPak.Auth.Xamarin.RuntimeEnvironment.Production">
            <summary>
              Targets a production environment.
            </summary>
        </member>
        <member name="F:TetraPak.Auth.Xamarin.RuntimeEnvironment.Migration">
            <summary>
              Targets a migration environment.
            </summary>
        </member>
        <member name="F:TetraPak.Auth.Xamarin.RuntimeEnvironment.Test">
            <summary>
              Targets a test environment.
            </summary>
        </member>
        <member name="F:TetraPak.Auth.Xamarin.RuntimeEnvironment.Development">
            <summary>
              Targets a development environment.
            </summary>
        </member>
        <member name="T:TetraPak.Auth.Xamarin.RuntimeEnvironmentExtensions">
            <summary>
              Extends the <see cref="T:TetraPak.Auth.Xamarin.RuntimeEnvironment"/> enum.
            </summary>
        </member>
        <member name="M:TetraPak.Auth.Xamarin.RuntimeEnvironmentExtensions.TryParseAsRuntimeEnvironment(System.String,TetraPak.Auth.Xamarin.RuntimeEnvironment@)">
            <summary>
              Attempts parsing a textual representation of a <see cref="T:TetraPak.Auth.Xamarin.RuntimeEnvironment"/> value.
            </summary>
            <param name="self">
              The textual value to be parsed.
            </param>
            <param name="runtimeEnvironment">
              Passes back the (successfully) parsed <see cref="T:TetraPak.Auth.Xamarin.RuntimeEnvironment"/> value.
            </param>
            <returns>
              The parsed <see cref="T:TetraPak.Auth.Xamarin.RuntimeEnvironment"/> value
            </returns>
        </member>
        <member name="T:TetraPak.Auth.Xamarin.RuntimePlatform">
            <summary>
              Used to specify the targeted runtime platform.
            </summary>
        </member>
        <member name="F:TetraPak.Auth.Xamarin.RuntimePlatform.Any">
            <summary>
              Runtime platform is not specified or not resolved/known.
            </summary>
        </member>
        <member name="F:TetraPak.Auth.Xamarin.RuntimePlatform.iOS">
            <summary>
             Indicates the iOS runtime platform.
            </summary>
        </member>
        <member name="F:TetraPak.Auth.Xamarin.RuntimePlatform.Android">
            <summary>
             Indicates the Android runtime platform.
            </summary>
        </member>
        <member name="F:TetraPak.Auth.Xamarin.RuntimePlatform.Windows">
            <summary>
             Indicates the Windows runtime platform.
            </summary>
        </member>
        <member name="F:TetraPak.Auth.Xamarin.RuntimePlatform.MacOS">
            <summary>
             Indicates Mac OS runtime platform.
            </summary>
        </member>
        <member name="T:TetraPak.Auth.Xamarin.TetraPakAuthCallbackHandler">
            <summary>
              For internal use by platform code.
            </summary>
        </member>
        <member name="T:TetraPak.Auth.Xamarin.TetraPakAuthenticator">
            <summary>
              A custom (Tetra Pak) implementation of the <see cref="T:TetraPak.Auth.Xamarin.IAuthenticator"/> contract.
            </summary>
        </member>
        <member name="M:TetraPak.Auth.Xamarin.TetraPakAuthenticator.GetAccessTokenAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:TetraPak.Auth.Xamarin.TetraPakAuthenticator.GetAccessTokenSilentlyAsync">
            <inheritdoc />
        </member>
        <member name="M:TetraPak.Auth.Xamarin.TetraPakAuthenticator.#ctor(TetraPak.Auth.Xamarin.AuthConfig,TetraPak.Auth.Xamarin.logging.ILog)">
            <summary>
              Initializes the authenticator.
            </summary>
            <param name="config"></param>
            <param name="log">
              (optional)<br/>
              A log to be used for logging internal operations and events-
            </param>
        </member>
        <member name="T:TetraPak.Auth.Xamarin.TokenCache">
            <summary>
              A basic token cache that stores instances of <see cref="T:TetraPak.Auth.Xamarin.AuthResult"/>.
            </summary>
        </member>
        <member name="M:TetraPak.Auth.Xamarin.TokenCache.AddAsync(System.String,TetraPak.Auth.Xamarin.AuthResult,System.Nullable{System.DateTime})">
            <summary>
              Adds tokens (in an <see cref="T:TetraPak.Auth.Xamarin.AuthResult"/> object) to the cache.
            </summary>
            <param name="key">
              Identifies the tokens (typically a client/app id).
            </param>
            <param name="tokens">
              An <see cref="T:TetraPak.Auth.Xamarin.AuthResult"/> object containing the tokens.
            </param>
            <param name="expires">
              (optional)<br/>
              A time when the tokens expire. Please note that <see cref="P:TetraPak.Auth.Xamarin.AuthResult.Expires"/>
              governs expiration of the access token themselves. This value simply controls
              how long the result is being cached. Leave unassigned unless all tokens should expire at the
              same time.
            </param>
        </member>
        <member name="M:TetraPak.Auth.Xamarin.TokenCache.TryGetAsync(System.String)">
            <summary>
              Attempts fetching all tokens from the cache.
            </summary>
            <param name="key">
              Identifies the tokens (typically a client/app id).
            </param>
            <returns>
              An <see cref="T:TetraPak.Auth.Xamarin.AuthResult"/> item.
            </returns>
        </member>
        <member name="M:TetraPak.Auth.Xamarin.TokenCache.RemoveAccessTokenAsync(System.String)">
            <summary>
              Removes any access token from cache.
            </summary>
            <param name="key">
              Identifies the token (typically a client/app id).
            </param>
        </member>
        <member name="M:TetraPak.Auth.Xamarin.TokenCache.RemoveRefreshTokenAsync(System.String)">
            <summary>
              Removes any refresh token from cache.
            </summary>
            <param name="key">
              Identifies the token (typically a client/app id).
            </param>
        </member>
        <member name="M:TetraPak.Auth.Xamarin.TokenCache.RemoveAsync(System.String)">
            <summary>
              Removes all tokens from cache.
            </summary>
            <param name="key">
              Identifies the tokens (typically a client/app id).
            </param>
        </member>
        <member name="M:TetraPak.Auth.Xamarin.TokenCache.#ctor(System.Boolean)">
            <summary>
              Initializes the token cache.
            </summary>
            <param name="isRefreshTokenPersisted">
              Specifies whether refresh tokens should be persisted.
            </param>
        </member>
    </members>
</doc>
